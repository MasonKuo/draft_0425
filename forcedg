import React, { Component } from 'react';
import * as d3 from 'd3';
import './graph.css';
// import $ from 'jquery';

function initsvg() {
  let graphData = {
    "nodes": [
      {
        "name": "NBA",
        "label": "Company",
        "id": 1
      },
      {
        "name": "Adidas",
        "label": "Company",
        "id": 2
      },
      {
        "name": "USA",
        "label": "Country",
        "id": 3
      },
      {
        "name": "China",
        "label": "Country",
        "id": 4
      }
    ],
    "links": [
      {
        "source": 1,
        "target": 2,
        "type": "Competition",
        "since": 2011
      },
      {
        "source": 1,
        "target": 3,
        "type": "Belong",
        "since": 2012
      },
      {
        "source": 2,
        "target": 3,
        "type": "Belong",
        "since": 2013
      },
      {
        "source": 3,
        "target": 4,
        "type": "Competition",
        "since": 2014
      }
    ]
  };
  let graphs;
  d3.json("d3.json", function (error, graph) {
      if (error) throw error;
      graphs = graph;
      update(graph.links, graph.nodes);
  });
  let colors = d3.scaleOrdinal(d3.schemeCategory10);

  let svg = d3.select("svg"),
      width = +svg.attr("width"),
      height = +svg.attr("height"),
      node,
      link,
      edgepaths,
      edgelabels,
      rx,ry;
  console.log(svg);
  console.log(d3);

  // let xRanger = d3.scaleLinear()
  //     .domain([2011, 2018])
  //     .range([0,1024])
  //     .clamp(true);
  //
  // let slider = svg.append("g")
  //     .attr("class", "slider")
  //     .attr("transform", "translate(" + 50 + "," + 25 + ")");
  //
  // slider.append("line")
  //     .attr("class", "track")
  //     .attr("x1", xRanger.range()[0])
  //     .attr("x2", xRanger.range()[1])
  //     .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
  //     .attr("class", "track-inset")
  //     .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
  //     .attr("class", "track-overlay")
  //     .call(d3.drag()
  //         .on("start.interrupt", function() { slider.interrupt(); })
  //         .on("start drag", function() { hue(xRanger.invert(d3.event.x)); }));
  //
  // slider.insert("g", ".track-overlay")
  //     .attr("class", "ticks")
  //     .attr("transform", "translate(0," + 18 + ")")
  //     .selectAll("text")
  //     .data(xRanger.ticks(5))
  //     .enter().append("text")
  //     .attr("x", xRanger)
  //     .attr("text-anchor", "middle")
  //     .text(function(d) { return d; });
  //
  // let handle = slider.insert("circle", ".track-overlay")
  //     .attr("class", "handle")
  //     .attr("r", 9);
  //
  // slider.transition() // Gratuitous intro!
  //   .duration(750)
  //   .tween("hue", function() {
  //     let i = d3.interpolate(0, 70);
  //     return function(t) { hue(i(t)); };
  //   });
  //
  // function hue(h) {
  //   handle.attr("cx", xRanger(h));
  //   svg.style("background-color", d3.hsl(h, 0.8, 0.8));
  // }

  let simulation = d3.forceSimulation()
      .force("link", d3.forceLink().id(function (d) {return d.id;}).distance(200).strength(0.5))
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(width / 2, height / 2));

  let xAxisValue = '2011';
  function update(links, nodes) {
      // new xRanger
      let slider = svg.append('g')
        .classed('slider', true)
        .attr('transform', 'translate(' + 50 +', '+ (50 / 2) + ')');

      let step = 1;
      let range = [2011, 2018]
      // using clamp here to avoid slider exceeding the range limits
      let xScale = d3.scaleLinear()
          .domain(range)
          .range([0, 1024])
          .clamp(true);

      // array useful for step sliders
      let rangeValues = d3.range(range[0], range[1], step || 1).concat(range[1]);
      let xAxis = d3.axisBottom(xScale).tickValues(rangeValues).tickFormat(function (d) {
          return d;
      });

      xScale.clamp(true);
      // drag behavior initialization
      let drag = d3.drag()
          .on('start.interrupt', function () {
              slider.interrupt();
          }).on('start drag', function () {
              draggedranger(d3.event.x);
          });

      // this is the main bar with a stroke (applied through CSS)
      let track = slider.append('line').attr('class', 'track')
          .attr('x1', xScale.range()[0])
          .attr('x2', xScale.range()[1]);

      // this is a bar (steelblue) that's inside the main "track" to make it look like a rect with a border
      let trackInset = d3.select(slider.node().appendChild(track.node().cloneNode())).attr('class', 'track-inset');

      let ticks = slider.append('g').attr('class', 'ticks').attr('transform', 'translate(0, 4)')
          .call(xAxis);

      // drag handle
      let handle = slider.append('circle').classed('handle', true)
          .attr('r', 8);

      // this is the bar on top of above tracks with stroke = transparent and on which the drag behaviour is actually called
      // try removing above 2 tracks and play around with the CSS for this track overlay, you'll see the difference
      let trackOverlay = d3.select(slider.node().appendChild(track.node().cloneNode())).attr('class', 'track-overlay')
          .call(drag);

      // text to display
      let text = svg.append('text').attr('transform', 'translate(' + (width/2) + ', ' + height/3 + ')')
          .text('Value: 0');

      // initial transition
      slider.transition().duration(750)
          .tween("drag", function () {
              let i = d3.interpolate(0, 10);
              return function (t) {
                  draggedranger(xScale(i(t)));
              }
          });

      function draggedranger(value) {
          let x = xScale.invert(value), index = null, midPoint, cx, xVal;
          if(step) {
              // if step has a value, compute the midpoint based on range values and reposition the slider based on the mouse position
              for (let i = 0; i < rangeValues.length - 1; i++) {
                  if (x >= rangeValues[i] && x <= rangeValues[i + 1]) {
                      index = i;
                      break;
                  }
              }
              midPoint = (rangeValues[index] + rangeValues[index + 1]) / 2;
              if (x < midPoint) {
                  cx = xScale(rangeValues[index]);
                  xVal = rangeValues[index];
              } else {
                  cx = xScale(rangeValues[index + 1]);
                  xVal = rangeValues[index + 1];
              }
          } else {
              // if step is null or 0, return the drag value as is
              cx = xScale(x);
              xVal = x.toFixed(3);
          }
          // use xVal as drag value
          handle.attr('cx', cx);
          text.text('Value: ' + xVal);
          xAxisValue = xVal;
      }
      let mapdata = new Set();
      let linkss = links.filter(function (e) {
        if (e.since == xAxisValue) {
          mapdata.add(e.source);
          mapdata.add(e.target);
          return e;
        }
      })

      link = svg.selectAll(".link")
          .data(linkss)
          .enter()
          .append("line")
          .attr("class", "link")
          .style("stroke", "#999")
          .style("stroke-width", "0.6")
          .attr('marker-end','url(#arrowhead)')
          
      link.append("title")
          .text(function (d) {return d.type;});

      edgelabels = svg.selectAll(".link")
          .data(linkss)
          .enter()
          .append("text")
          .attr("id", (d, i) => {return 'edgepath' + i})
          .style("pointer-events", "none");
      // edgepaths = svg.selectAll(".edgepath")
      //   .data(links)
      //   .enter()
      //   .append('path')
      //   .attrs({
      //       'class': 'edgepath',
      //       'fill-opacity': 0,
      //       'stroke-opacity': 0,
      //       'id': function (d, i) {return 'edgepath' + i}
      //   })
      //   .style("pointer-events", "none");
      //
      // edgelabels = svg.selectAll(".edgelabel")
      //   .data(links)
      //   .enter()
      //   .append('text')
      //   .style("pointer-events", "none")
      //   .attrs({
      //       'class': 'edgelabel',
      //       'id': function (d, i) {return 'edgelabel' + i},
      //       'font-size': 10,
      //       'fill': '#aaa'
      //   });
      //
      edgelabels.append('textPath')
        .attr('xlink:href', function (d, i) {return '#edgepath' + i})
        .style("text-anchor", "middle")
        .style("pointer-events", "none")
        .attr("startOffset", "50%")
        .text(function (d) {return d.type});

      let nodess = nodes.filter(function (e) {
        return mapdata.has(e.id)
      })
      node = svg.selectAll(".node")
          .data(nodess)
          .enter()
          .append("g")
          .attr("class", "node")
          .style("user-select", "none")
          .call(d3.drag()
              .on("start", dragstarted)
              .on("drag", dragged)
              .on("end", dragended)
          );

      node.append("circle")
          .attr("r", 5)
          .style("fill", "#111")
          .style("stroke", "#fff")
          .style("stroke-width", "2px");

          // function (d, i) {return colors(i);})

      node.append("title")
          .text(function (d) {return d.id;});

      node.append("text")
          .attr("dy", -3)
          .text(function (d) {return d.name+":"+d.label;});
      console.log(nodess);
      simulation.nodes(nodess)
          .on("tick", ticked);

      simulation.force("link")
          .links(linkss);
  }

  function ticked() {
    link
        .attr("x1", function (d) {return d.source.x;})
        .attr("y1", function (d) {return d.source.y;})
        .attr("x2", function (d) {return d.target.x;})
        .attr("y2", function (d) {return d.target.y;});

    node
        .attr("transform", function (d) {return "translate(" + d.x + ", " + d.y + ")";});
  }

  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart()
    d.fx = d.x;
    d.fy = d.y;
  }

  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }

  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }
}

class D3Graph extends Component {
  componentDidMount() {
    initsvg();
  }
  render(){
    return (
      <div>
        <svg width="1422" height="600"></svg>
      </div>
    )
  }
}

export default D3Graph;
